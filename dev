#!/bin/bash

# TDD-Pro Development Script
# Builds and installs binaries locally to mirror production environment

set -e

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Configuration
readonly INSTALL_DIR="$HOME/.tdd-pro/bin"
readonly TUI_DIR="packages/tui"
readonly MCP_DIR="packages/tdd-pro"

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

log_build() {
    echo -e "${BLUE}[BUILD]${NC} $1"
}

# Show banner
show_banner() {
    cat << 'EOF'
                                                         
                         ‚ï≠‚îÄ‚ïÆ    ‚îå‚îÄ‚ïÆ  ‚îå‚îÄ‚ïÆ                 
                        ‚ï≠‚îò‚ñå‚îú‚îÄ‚î¨‚îÄ‚îÄ‚î§‚ñë‚îú‚îÄ‚îÄ‚î§‚ñë‚îÇ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ‚îå‚îÄ‚î¨‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ 
                        ‚ï∞‚îê‚ñà‚ï≠‚îÄ‚î§‚ñó‚ï≠‚îê‚ñë‚îÇ‚ñó‚ï≠‚îê‚ñë‚îú‚î§‚ñê‚îå‚ïÆ‚ñë‚îÇ‚îÇ‚ñê‚ï≠‚îÄ‚î§‚ñó‚îå‚ïÆ‚ñë‚îÇ 
                         ‚îÇ‚ñì‚ï∞‚ïÆ‚îÇ‚ñì‚ï∞‚îò‚ñë‚îÇ‚ñì‚ï∞‚îò‚ñë‚îú‚î§‚ñì‚îú‚ïØ‚ñë‚îÇ‚îÇ‚ñì‚îÇ ‚îÇ‚ñì‚ï∞‚ïØ‚ñë‚îÇ 
                         ‚ï∞‚îÄ‚îÄ‚ïØ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îò‚îÇ‚ñì‚ï≠‚îÄ‚îÄ‚ïØ‚îî‚îÄ‚îò ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ 
                                        ‚îî‚îÄ‚îò              
                                
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                             TDD-Pro Development                              ‚ïë
‚ïë                          Build and Install Script                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

EOF
}

# Create install directory
setup_install_dir() {
    log_info "Setting up development environment..."
    mkdir -p "$INSTALL_DIR"
    log_info "Install directory: $INSTALL_DIR"
}

# Build TUI binary
build_tui() {
    log_build "Building TUI binary..."
    cd "$TUI_DIR"
    
    # Build the Go binary
    go build -o "$INSTALL_DIR/tdd-pro" .
    
    # Make sure it's executable
    chmod 755 "$INSTALL_DIR/tdd-pro"
    
    cd - > /dev/null
    log_info "‚úÖ TUI binary built and installed"
}

# Build MCP server binary  
build_mcp() {
    log_build "Building MCP server binary..."
    cd "$MCP_DIR"
    
    # Install dependencies if needed
    if [[ ! -d "node_modules" ]]; then
        log_info "Installing dependencies..."
        bun install
    fi
    
    # Build the MCP server binary
    bun build --compile --outfile="$INSTALL_DIR/tdd-pro-mcp" ./mcp-stdio-server.ts
    
    # Make sure it's executable
    chmod 755 "$INSTALL_DIR/tdd-pro-mcp"
    
    cd - > /dev/null
    log_info "‚úÖ MCP server binary built and installed"
}

# Test the installation
test_installation() {
    log_info "Testing installation..."
    
    # Test TUI binary
    if [[ -x "$INSTALL_DIR/tdd-pro" ]]; then
        local version_output
        if version_output=$("$INSTALL_DIR/tdd-pro" --version 2>&1); then
            log_info "‚úÖ TUI binary working: $version_output"
        else
            log_warn "‚ö†Ô∏è  TUI binary exists but version check failed"
        fi
    else
        log_error "‚ùå TUI binary not found or not executable"
        return 1
    fi
    
    # Test MCP binary
    if [[ -x "$INSTALL_DIR/tdd-pro-mcp" ]]; then
        log_info "‚úÖ MCP server binary installed and executable"
    else
        log_error "‚ùå MCP server binary not found or not executable"
        return 1
    fi
    
    # Show file sizes
    log_info "Binary sizes:"
    ls -lh "$INSTALL_DIR"/ | grep -E "(tdd-pro|tdd-pro-mcp)" | while read -r line; do
        log_info "   $line"
    done
}

# Add to PATH if needed
update_path() {
    if [[ ":$PATH:" != *":$INSTALL_DIR:"* ]]; then
        log_warn "‚ö†Ô∏è  $INSTALL_DIR is not in your PATH"
        log_info "Add this to your shell config:"
        log_info "   echo 'export PATH=\"$INSTALL_DIR:\$PATH\"' >> ~/.zshrc"
        log_info "   source ~/.zshrc"
    else
        log_info "‚úÖ $INSTALL_DIR is in your PATH"
    fi
}

# Watch for file changes and rebuild (using entr if available)
watch_mode() {
    log_info ""
    log_info "üîç Starting watch mode..."
    log_info "Watching for changes in:"
    log_info "   - $TUI_DIR/**/*.go"
    log_info "   - $MCP_DIR/**/*.ts"
    log_info ""
    log_info "Press Ctrl+C to stop watching"
    
    # Check if entr is available (lightweight file watcher)
    if command -v entr >/dev/null 2>&1; then
        log_info "Using entr for file watching..."
        
        # Watch both Go and TypeScript files
        (find "$TUI_DIR" -name '*.go'; find "$MCP_DIR" -name '*.ts' -not -path "*/node_modules/*") | \
        entr -c sh -c '
            echo "[$(date)] Files changed, rebuilding..."
            '"$0"' build-only
            echo "[$(date)] Rebuild completed. Watching for changes..."
        '
    elif command -v fswatch >/dev/null 2>&1; then
        log_info "Using fswatch for file watching..."
        
        # Watch for changes in both directories
        fswatch -o \
            "$TUI_DIR" \
            "$MCP_DIR" \
            --exclude=".*/(node_modules|dist|\.git|\.build)/.*" \
            --exclude=".*/\..*" \
            | while read -r num; do
                log_info ""
                log_build "Files changed, rebuilding..."
                
                if build_all; then
                    log_info "‚úÖ Rebuild completed at $(date)"
                else
                    log_error "‚ùå Rebuild failed at $(date)"
                fi
                log_info "Continuing to watch for changes..."
            done
    else
        log_warn "No file watcher found. Install entr or fswatch:"
        log_info "   brew install entr      # Lightweight option"
        log_info "   brew install fswatch   # Feature-rich option"
        log_info ""
        log_info "Falling back to manual rebuild. Run './dev build' to rebuild."
        return 0
    fi
}

# Build all components
build_all() {
    build_tui
    build_mcp
    return 0
}

# Build without banner/setup (for watch mode)
build_only() {
    build_tui
    build_mcp
}

# Show usage
show_usage() {
    cat << EOF
TDD-Pro Development Script

USAGE:
  ./dev [command]

COMMANDS:
  build      Build and install both binaries (default)
  watch      Build and watch for changes (auto-rebuild)
  tui        Build only the TUI binary
  mcp        Build only the MCP server binary
  test       Test the installation
  clean      Remove installed binaries
  help       Show this help

EXAMPLES:
  ./dev              # Build and install both binaries
  ./dev watch        # Build and watch for changes
  ./dev tui          # Build only TUI
  ./dev mcp          # Build only MCP server

DEVELOPMENT SETUP:
  The binaries are installed to: $INSTALL_DIR
  This mirrors the production installation directory.
  
  No need to set TDDPRO_MCP_PATH - the TUI will automatically
  find the MCP server in the installed location.

DEPENDENCIES:
  For watch mode, install a file watcher:
    brew install entr      # Lightweight, recommended
    brew install fswatch   # Feature-rich alternative

EOF
}

# Clean installation
clean_installation() {
    log_info "Cleaning development installation..."
    rm -f "$INSTALL_DIR/tdd-pro"
    rm -f "$INSTALL_DIR/tdd-pro-mcp"
    log_info "‚úÖ Cleaned development binaries"
}

# Main function
main() {
    case "${1:-build}" in
        build)
            show_banner
            setup_install_dir
            build_all
            test_installation
            update_path
            log_info ""
            log_info "üéâ Development environment ready!"
            log_info "Run './dev watch' to auto-rebuild on changes."
            ;;
        build-only)
            # Hidden command for watch mode
            build_only
            ;;
        watch)
            show_banner
            setup_install_dir
            build_all
            test_installation
            update_path
            watch_mode
            ;;
        tui)
            setup_install_dir
            build_tui
            test_installation
            ;;
        mcp)
            setup_install_dir
            build_mcp
            test_installation
            ;;
        test)
            test_installation
            ;;
        clean)
            clean_installation
            ;;
        help|-h|--help)
            show_usage
            ;;
        *)
            log_error "Unknown command: $1"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
