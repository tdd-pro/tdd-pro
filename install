#!/bin/bash

# TDD-Pro Installation Script
# Description: Cross-platform installation script for TDD-Pro
# Usage: curl -fsSL https://raw.githubusercontent.com/tdd-pro/tdd-pro/main/install | bash

set -e

# Configuration
readonly REPO="tdd-pro/tdd-pro"
readonly BINARY_NAME="tdd-pro"
readonly INSTALL_DIR="${INSTALL_DIR:-/usr/local/bin}"
readonly VERSION="${VERSION:-latest}"

# User experience configuration
readonly VERBOSE="${VERBOSE:-false}"
readonly FORCE="${FORCE:-false}"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Fetch release information from GitHub API
fetch_release_info() {
    local version="$1"
    local api_url
    
    log_info "Fetching release information for version: $version"
    
    if [[ "$version" == "latest" ]]; then
        api_url="https://api.github.com/repos/${REPO}/releases/latest"
    else
        # Remove 'v' prefix if present for API call
        version="${version#v}"
        api_url="https://api.github.com/repos/${REPO}/releases/tags/v${version}"
    fi
    
    log_info "Querying GitHub API: $api_url"
    
    # Check if curl is available
    if ! command -v curl >/dev/null 2>&1; then
        log_error "curl is required but not installed"
        log_error "Please install curl and try again"
        exit 1
    fi
    
    # Fetch release data with error handling
    local release_data
    if ! release_data=$(curl -fsSL "$api_url" 2>/dev/null); then
        log_error "Failed to fetch release information from GitHub"
        log_error "This could be due to:"
        log_error "  - Network connectivity issues"
        log_error "  - Invalid version specified: $version"
        log_error "  - GitHub API rate limiting"
        log_error "  - Repository not found: $REPO"
        exit 1
    fi
    
    # Parse release information
    local tag_name download_base
    if ! tag_name=$(echo "$release_data" | grep '"tag_name"' | cut -d'"' -f4); then
        log_error "Failed to parse tag name from release data"
        exit 1
    fi
    
    if [[ -z "$tag_name" ]]; then
        log_error "Empty tag name received from GitHub API"
        exit 1
    fi
    
    # Construct download URL base
    download_base="https://github.com/${REPO}/releases/download/${tag_name}"
    
    log_info "Found release: $tag_name"
    
    # Export for use in other functions
    export RELEASE_TAG="$tag_name"
    export DOWNLOAD_BASE="$download_base"
    export RELEASE_DATA="$release_data"
}

# Platform detection function
detect_platform() {
    local os arch
    
    # Detect operating system
    case "$(uname -s)" in
        Linux*)
            if [[ -f /proc/version ]] && grep -qi microsoft /proc/version; then
                os="linux"
                log_info "Detected Windows Subsystem for Linux (WSL)"
            else
                os="linux"
                log_info "Detected Linux"
            fi
            ;;
        Darwin*)
            os="darwin"
            log_info "Detected macOS"
            ;;
        CYGWIN*|MINGW*|MSYS*)
            log_error "Windows is not supported. Please use WSL/WSL2."
            exit 1
            ;;
        *)
            log_error "Unsupported operating system: $(uname -s)"
            log_error "Supported platforms: macOS, Linux, WSL/WSL2"
            exit 1
            ;;
    esac
    
    # Detect architecture
    case "$(uname -m)" in
        x86_64|amd64)
            arch="amd64"
            ;;
        arm64|aarch64)
            arch="arm64"
            ;;
        *)
            log_error "Unsupported architecture: $(uname -m)"
            log_error "Supported architectures: x86_64/amd64, arm64/aarch64"
            exit 1
            ;;
    esac
    
    log_info "Platform: ${os}-${arch}"
    
    # Export for use in other functions
    export DETECTED_OS="$os"
    export DETECTED_ARCH="$arch"
}

# Download the correct binary for the detected platform
download_binary() {
    local temp_dir binary_filename download_url
    
    # Construct binary filename based on the naming convention from PRD
    binary_filename="${BINARY_NAME}-${RELEASE_TAG}-${DETECTED_OS}-${DETECTED_ARCH}.tar.gz"
    download_url="${DOWNLOAD_BASE}/${binary_filename}"
    
    log_info "Downloading binary: $binary_filename"
    log_info "Download URL: $download_url"
    
    # Create temporary directory
    temp_dir=$(mktemp -d)
    export TEMP_DIR="$temp_dir"
    
    # Cleanup function for temporary directory
    cleanup_temp() {
        if [[ -n "$TEMP_DIR" && -d "$TEMP_DIR" ]]; then
            log_info "Cleaning up temporary directory: $TEMP_DIR"
            rm -rf "$TEMP_DIR"
        fi
    }
    
    # Set trap to cleanup on exit
    trap cleanup_temp EXIT
    
    local binary_path="$temp_dir/$binary_filename"
    
    log_info "Downloading to: $binary_path"
    
    # Show progress during download
    log_info "Starting download..."
    
    # Download with progress bar and retry logic
    local max_retries=3
    local retry_count=0
    
    while [[ $retry_count -lt $max_retries ]]; do
        if curl -fL --progress-bar "$download_url" -o "$binary_path"; then
            log_info "✅ Download completed successfully"
            break
        else
            retry_count=$((retry_count + 1))
            if [[ $retry_count -lt $max_retries ]]; then
                log_warn "Download failed, retrying... (attempt $retry_count/$max_retries)"
                sleep 2
            else
                log_error "Download failed after $max_retries attempts"
                log_error "URL: $download_url"
                log_error "This could be due to:"
                log_error "  - Network connectivity issues"
                log_error "  - Binary not available for your platform: ${DETECTED_OS}-${DETECTED_ARCH}"
                log_error "  - Release does not contain expected binary"
                log_error "  - Temporary server issues"
                exit 1
            fi
        fi
    done
    
    # Verify file was downloaded and has content
    if [[ ! -f "$binary_path" ]]; then
        log_error "Downloaded file not found: $binary_path"
        exit 1
    fi
    
    local file_size
    file_size=$(stat -f%z "$binary_path" 2>/dev/null || stat -c%s "$binary_path" 2>/dev/null || echo "0")
    
    if [[ "$file_size" -eq 0 ]]; then
        log_error "Downloaded file is empty: $binary_path"
        exit 1
    fi
    
    log_info "Downloaded binary size: $(( file_size / 1024 ))KB"
    
    # Export path for use in other functions
    export BINARY_PATH="$binary_path"
    export BINARY_FILENAME="$binary_filename"
}

# Verify SHA256 checksum of downloaded binary
verify_checksum() {
    local checksums_url checksums_file expected_checksum actual_checksum
    
    log_info "Verifying SHA256 checksum for security..."
    
    # Download checksums file
    checksums_url="${DOWNLOAD_BASE}/checksums.txt"
    checksums_file="$TEMP_DIR/checksums.txt"
    
    log_info "Downloading checksums from: $checksums_url"
    
    if ! curl -fsSL "$checksums_url" -o "$checksums_file"; then
        log_error "Failed to download checksums file"
        log_error "URL: $checksums_url"
        log_error "This could indicate:"
        log_error "  - Security issue: checksums file missing"
        log_error "  - Network connectivity problems"
        log_error "  - Release packaging issue"
        log_error ""
        log_error "For security reasons, installation cannot continue without checksum verification"
        exit 1
    fi
    
    # Extract expected checksum for our binary
    if ! expected_checksum=$(grep "$BINARY_FILENAME" "$checksums_file" | cut -d' ' -f1); then
        log_error "Failed to find checksum for $BINARY_FILENAME in checksums file"
        log_error "Available checksums:"
        cat "$checksums_file" >&2
        exit 1
    fi
    
    if [[ -z "$expected_checksum" ]]; then
        log_error "Empty checksum found for $BINARY_FILENAME"
        exit 1
    fi
    
    log_info "Expected SHA256: $expected_checksum"
    
    # Calculate actual checksum of downloaded file
    log_info "Calculating SHA256 of downloaded file..."
    
    # Try different sha256 commands based on platform
    if command -v sha256sum >/dev/null 2>&1; then
        actual_checksum=$(sha256sum "$BINARY_PATH" | cut -d' ' -f1)
    elif command -v shasum >/dev/null 2>&1; then
        actual_checksum=$(shasum -a 256 "$BINARY_PATH" | cut -d' ' -f1)
    elif command -v openssl >/dev/null 2>&1; then
        actual_checksum=$(openssl dgst -sha256 "$BINARY_PATH" | cut -d' ' -f2)
    else
        log_error "No SHA256 utility found on system"
        log_error "Please install one of: sha256sum, shasum, or openssl"
        log_error "Cannot verify checksum without these tools"
        exit 1
    fi
    
    log_info "Actual SHA256:   $actual_checksum"
    
    # Compare checksums
    if [[ "$expected_checksum" == "$actual_checksum" ]]; then
        log_info "✅ Checksum verification PASSED"
        log_info "   Binary integrity confirmed"
    else
        log_error "❌ CHECKSUM VERIFICATION FAILED"
        log_error ""
        log_error "SECURITY WARNING: The downloaded binary does not match the expected checksum!"
        log_error "Expected: $expected_checksum"
        log_error "Actual:   $actual_checksum"
        log_error ""
        log_error "This could indicate:"
        log_error "  - Corrupted download"
        log_error "  - Network interference"
        log_error "  - Potential security compromise"
        log_error ""
        log_error "For your security, installation has been aborted."
        log_error "Please try again or report this issue."
        exit 1
    fi
}

# Extract and install binary to target directory
install_binary() {
    log_info "Installing binary to target directory..."
    
    # Determine installation directory
    local install_dir="$INSTALL_DIR"
    local use_sudo=false
    local extract_dir="$TEMP_DIR/extract"
    
    # Check if we can write to the install directory
    if [[ ! -d "$install_dir" ]]; then
        log_info "Creating installation directory: $install_dir"
        if ! mkdir -p "$install_dir" 2>/dev/null; then
            log_warn "Cannot create $install_dir without elevated privileges"
            use_sudo=true
        fi
    elif [[ ! -w "$install_dir" ]]; then
        log_warn "Cannot write to $install_dir without elevated privileges"
        use_sudo=true
    fi
    
    # If we need sudo, ask for permission and explain why
    if [[ "$use_sudo" == "true" ]]; then
        log_warn "Administrator privileges required for installation to $install_dir"
        log_info "This is needed to:"
        log_info "  - Create the installation directory if it doesn't exist"
        log_info "  - Copy the binary to a system-wide location"
        log_info "  - Set proper permissions for all users"
        log_info ""
        log_info "Alternative: Set INSTALL_DIR environment variable to a user-writable location"
        log_info "Example: export INSTALL_DIR=~/.local/bin"
        log_info ""
        
        # Check if sudo is available
        if ! command -v sudo >/dev/null 2>&1; then
            log_error "sudo is not available, but elevated privileges are required"
            log_error "Please either:"
            log_error "  - Install sudo"
            log_error "  - Run this script as root"
            log_error "  - Set INSTALL_DIR to a writable location"
            exit 1
        fi
        
        # Test sudo access
        log_info "Requesting administrator privileges..."
        if ! sudo -v; then
            log_error "Failed to obtain administrator privileges"
            log_error "Installation cannot continue without write access to $install_dir"
            exit 1
        fi
    fi
    
    # Extract the downloaded tarball
    log_info "Extracting binary from archive..."
    mkdir -p "$extract_dir"
    
    if ! tar -xzf "$BINARY_PATH" -C "$extract_dir"; then
        log_error "Failed to extract archive: $BINARY_PATH"
        log_error "The downloaded file may be corrupted"
        exit 1
    fi
    
    # Find the binary in the extracted files
    local binary_source
    if [[ -f "$extract_dir/$BINARY_NAME" ]]; then
        binary_source="$extract_dir/$BINARY_NAME"
    elif [[ -f "$extract_dir/bin/$BINARY_NAME" ]]; then
        binary_source="$extract_dir/bin/$BINARY_NAME"
    else
        # Look for any executable file
        binary_source=$(find "$extract_dir" -type f -executable -name "$BINARY_NAME*" | head -1)
        if [[ -z "$binary_source" ]]; then
            log_error "Could not find binary '$BINARY_NAME' in extracted archive"
            log_error "Archive contents:"
            find "$extract_dir" -type f | head -10 >&2
            exit 1
        fi
    fi
    
    log_info "Found binary: $binary_source"
    
    # Install the binary
    local binary_target="$install_dir/$BINARY_NAME"
    
    log_info "Installing to: $binary_target"
    
    if [[ "$use_sudo" == "true" ]]; then
        if ! sudo mkdir -p "$install_dir"; then
            log_error "Failed to create installation directory with sudo"
            exit 1
        fi
        
        if ! sudo cp "$binary_source" "$binary_target"; then
            log_error "Failed to copy binary with sudo"
            exit 1
        fi
        
        if ! sudo chmod 755 "$binary_target"; then
            log_error "Failed to set permissions with sudo"
            exit 1
        fi
    else
        if ! cp "$binary_source" "$binary_target"; then
            log_error "Failed to copy binary to $binary_target"
            exit 1
        fi
        
        if ! chmod 755 "$binary_target"; then
            log_error "Failed to set executable permissions"
            exit 1
        fi
    fi
    
    log_info "✅ Binary installed successfully"
    log_info "   Location: $binary_target"
    log_info "   Permissions: $(ls -l "$binary_target" | cut -d' ' -f1)"
    
    # Export for verification step
    export INSTALLED_BINARY="$binary_target"
}

# Verify that the installation was successful
verify_installation() {
    log_info "Verifying installation..."
    
    local binary_path="$INSTALLED_BINARY"
    
    # Check if binary file exists
    if [[ ! -f "$binary_path" ]]; then
        log_error "❌ Installation verification FAILED"
        log_error "Binary not found at expected location: $binary_path"
        exit 1
    fi
    
    log_info "✅ Binary file exists: $binary_path"
    
    # Check if binary is executable
    if [[ ! -x "$binary_path" ]]; then
        log_error "❌ Installation verification FAILED"
        log_error "Binary is not executable: $binary_path"
        log_error "Current permissions: $(ls -l "$binary_path" | cut -d' ' -f1)"
        exit 1
    fi
    
    log_info "✅ Binary is executable"
    
    # Check if binary is in PATH (if installed to standard location)
    local in_path=false
    if command -v "$BINARY_NAME" >/dev/null 2>&1; then
        local found_path
        found_path=$(command -v "$BINARY_NAME")
        if [[ "$found_path" == "$binary_path" ]]; then
            log_info "✅ Binary is available in PATH: $found_path"
            in_path=true
        else
            log_warn "⚠️  Different binary found in PATH: $found_path"
            log_warn "   Installed binary: $binary_path"
            log_warn "   You may need to update your PATH or restart your shell"
        fi
    else
        log_warn "⚠️  Binary is not in PATH"
        log_warn "   You may need to add $INSTALL_DIR to your PATH"
        log_warn "   Or restart your shell to pick up PATH changes"
    fi
    
    # Try to run the binary with --version flag
    log_info "Testing binary execution..."
    
    local version_output
    if version_output=$("$binary_path" --version 2>&1); then
        log_info "✅ Binary executed successfully"
        log_info "   Version output: $version_output"
    elif version_output=$("$binary_path" -V 2>&1); then
        log_info "✅ Binary executed successfully"
        log_info "   Version output: $version_output"
    elif version_output=$("$binary_path" version 2>&1); then
        log_info "✅ Binary executed successfully"
        log_info "   Version output: $version_output"
    else
        # Try just running the binary to see if it works
        if "$binary_path" --help >/dev/null 2>&1 || "$binary_path" -h >/dev/null 2>&1; then
            log_info "✅ Binary executed successfully (help command worked)"
        else
            log_warn "⚠️  Binary execution test failed"
            log_warn "   This could be normal if the binary requires specific arguments"
            log_warn "   Try running: $binary_path --help"
        fi
    fi
    
    # Final verification summary
    log_info ""
    log_info "🎉 Installation verification COMPLETED"
    log_info "   Binary location: $binary_path"
    log_info "   File permissions: $(ls -l "$binary_path" | cut -d' ' -f1)"
    
    if [[ "$in_path" == "true" ]]; then
        log_info "   Available as: $BINARY_NAME"
    else
        log_info "   Run with full path: $binary_path"
    fi
}

# Enhanced error handling and edge cases
handle_errors_and_edge_cases() {
    log_info "Checking system requirements and edge cases..."
    
    # Check for required tools
    local missing_tools=()
    
    if ! command -v curl >/dev/null 2>&1; then
        missing_tools+=("curl")
    fi
    
    if ! command -v tar >/dev/null 2>&1; then
        missing_tools+=("tar")
    fi
    
    # Check for at least one SHA256 tool
    if ! command -v sha256sum >/dev/null 2>&1 && \
       ! command -v shasum >/dev/null 2>&1 && \
       ! command -v openssl >/dev/null 2>&1; then
        missing_tools+=("sha256sum/shasum/openssl")
    fi
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        log_error "❌ Missing required system tools:"
        for tool in "${missing_tools[@]}"; do
            log_error "   - $tool"
        done
        log_error ""
        log_error "Please install the missing tools and try again."
        log_error ""
        log_error "Installation commands by platform:"
        log_error "  Ubuntu/Debian: sudo apt-get update && sudo apt-get install curl tar openssl"
        log_error "  CentOS/RHEL:   sudo yum install curl tar openssl"
        log_error "  macOS:         curl and tar are pre-installed, openssl via: brew install openssl"
        exit 1
    fi
    
    # Check disk space (basic check)
    local available_space
    if command -v df >/dev/null 2>&1; then
        # Get available space in KB for the temp directory
        available_space=$(df "${TEMP_DIR:-/tmp}" | tail -1 | awk '{print $4}')
        local min_space=51200  # 50MB in KB
        
        if [[ "$available_space" -lt "$min_space" ]]; then
            log_warn "⚠️  Low disk space detected"
            log_warn "   Available: $(( available_space / 1024 ))MB"
            log_warn "   Recommended: $(( min_space / 1024 ))MB"
            log_warn "   Installation may fail if insufficient space"
        fi
    fi
    
    # Check network connectivity
    log_info "Testing network connectivity..."
    if ! curl -fsSL --connect-timeout 10 "https://api.github.com" >/dev/null 2>&1; then
        log_error "❌ Network connectivity test failed"
        log_error "Cannot reach GitHub API (https://api.github.com)"
        log_error "Please check your internet connection and try again."
        log_error ""
        log_error "Common issues:"
        log_error "  - No internet connection"
        log_error "  - Corporate firewall blocking GitHub"
        log_error "  - DNS resolution issues"
        log_error "  - Proxy configuration needed"
        exit 1
    fi
    
    log_info "✅ System requirements check passed"
}

# User experience enhancements
show_banner() {
    cat << 'EOF'

                         ╭─╮    ┌─╮  ┌─╮                 
                        ╭┘▌╰─┬──╯░├──╯░│┌────╮┌───┬────╮ 
                        ╰┐█╭─┤▗╭┐░│▗╭┐░├┤▐┌╮░││▐╭─┤▗┌╮░│ 
                         │▓╰╮│▓╰┘░│▓╰┘░├┤▓╰╯░││▓│ │▓╰╯░│ 
                         └──╯╰────┴────┘│▓╭──╯└─┘ ╰────╯ 
                                        └─┘              
                                
╔══════════════════════════════════════════════════════════════════════════════╗
║                              TDD-Pro Installer                               ║
║                    Test-Driven Development Project Manager                   ║
╚══════════════════════════════════════════════════════════════════════════════╝
EOF
    echo
}

show_usage() {
    cat << EOF
TDD-Pro Installation Script

USAGE:
  curl -fsSL https://raw.githubusercontent.com/tdd-pro/tdd-pro/main/install | bash

ENVIRONMENT VARIABLES:
  INSTALL_DIR    Installation directory (default: /usr/local/bin)
  VERSION        Version to install (default: latest)
  VERBOSE        Enable verbose output (default: false)
  FORCE          Force reinstallation (default: false)

EXAMPLES:
  # Install latest version to default location
  curl -fsSL https://raw.githubusercontent.com/tdd-pro/tdd-pro/main/install | bash

  # Install to user directory
  export INSTALL_DIR=~/.local/bin
  curl -fsSL https://raw.githubusercontent.com/tdd-pro/tdd-pro/main/install | bash

  # Install specific version with verbose output
  export VERSION=v1.0.0 VERBOSE=true
  curl -fsSL https://raw.githubusercontent.com/tdd-pro/tdd-pro/main/install | bash

  # Force reinstall (useful for upgrades)
  export FORCE=true
  curl -fsSL https://raw.githubusercontent.com/tdd-pro/tdd-pro/main/install | bash

For more information, visit: https://github.com/tdd-pro/tdd-pro
EOF
}

show_post_install_instructions() {
    log_info ""
    log_info "🎉 Installation completed successfully!"
    log_info ""
    log_info "📋 Next steps:"
    log_info "  1. Verify installation: $BINARY_NAME --version"
    log_info "  2. Get help:           $BINARY_NAME --help"
    log_info "  3. Initialize project: cd your-project && $BINARY_NAME init"
    log_info ""
    log_info "📖 Documentation: https://github.com/tdd-pro/tdd-pro/blob/main/README.md"
    log_info "🐛 Issues:        https://github.com/tdd-pro/tdd-pro/issues"
    log_info "💬 Discussions:   https://github.com/tdd-pro/tdd-pro/discussions"
    log_info ""
    
    # PATH reminder if needed
    if [[ "$INSTALL_DIR" != "/usr/local/bin" && "$INSTALL_DIR" != "/usr/bin" ]]; then
        log_info "💡 Add to PATH (if not already added):"
        log_info "  echo 'export PATH=\"$INSTALL_DIR:\$PATH\"' >> ~/.bashrc"
        log_info "  echo 'export PATH=\"$INSTALL_DIR:\$PATH\"' >> ~/.zshrc"
        log_info "  source ~/.bashrc  # or ~/.zshrc"
        log_info ""
    fi
    
    log_info "Thank you for using TDD-Pro! 🚀"
}

# Full installation workflow
main() {
    # Handle command line arguments for help
    case "${1:-}" in
        -h|--help|help)
            show_usage
            exit 0
            ;;
    esac
    
    # Show banner for visual appeal
    show_banner
    
    log_info "Starting TDD-Pro installation..."
    log_info "Version: $VERSION"
    log_info "Install directory: $INSTALL_DIR"
    
    if [[ "$VERBOSE" == "true" ]]; then
        log_info "Verbose mode: enabled"
    fi
    
    if [[ "$FORCE" == "true" ]]; then
        log_info "Force mode: enabled (will overwrite existing installation)"
    fi
    
    log_info ""
    
    # Task 7: Handle errors and edge cases (upfront system checks)
    handle_errors_and_edge_cases
    log_info "✅ Task 7 completed: System requirements verified"
    log_info ""
    
    # Task 1: Detect platform and architecture
    detect_platform
    log_info "✅ Task 1 completed: Platform detection"
    log_info "   OS: $DETECTED_OS"
    log_info "   Architecture: $DETECTED_ARCH"
    log_info ""
    
    # Task 2: Fetch release info from GitHub
    fetch_release_info "$VERSION"
    log_info "✅ Task 2 completed: Release information fetched"
    log_info "   Release: $RELEASE_TAG"
    log_info "   Download base: $DOWNLOAD_BASE"
    log_info ""
    
    # Task 3: Download correct binary
    download_binary
    log_info "✅ Task 3 completed: Binary downloaded successfully"
    log_info ""
    
    # Task 4: Verify SHA256 checksum
    verify_checksum
    log_info "✅ Task 4 completed: Checksum verification passed"
    log_info ""
    
    # Task 5: Install binary
    install_binary
    log_info "✅ Task 5 completed: Binary installed successfully"
    log_info ""
    
    # Task 6: Verify installation
    verify_installation
    log_info "✅ Task 6 completed: Installation verified"
    log_info ""
    
    log_info "🎉 TDD-Pro installation completed successfully!"
    log_info ""
    
    # Show post-install instructions
    show_post_install_instructions
}

# Run the installation if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
